SQL> --SYS계정은 되도록 사용을 지양하도록 한다. 워낙 막강해서 사용이 부담스럽다.
SQL> --SYS보다는 하위의 관리자인 SYSTEM 이용
SQL> --SYS계정으로 로그인한 상태에서 SYSTEM에 계정을 재할당
SQL> ALTER USER SYSTEM
  2  IDENTIFIED BY 1234;

User altered.

SQL> --이미 SQLPLUS에 접속한 상태에서 다른 계정으로 전환할 때는 SQLPLUS 호출 금지
SQL> --접속 전환하는 명령어 사용 -> CONNECT, CONN
SQL> CONN SYSTEM/ 1234
Connected.
SQL> --현재 접속된 계정 확인
SQL> SHOW USER;
USER is "SYSTEM"
SQL> --현재 시스템에 존재하는 모든 유저를 출력
SQL> --오라클에서 시스템 정보를 알기 위해서는 사전을 조회
SQL> --현재 접속자가 관리자인 경우 사전의 이름이 DBA_ 혹은 V$로 시작함
SQL> SELECT USERNAME FROM USERNAME;
SELECT USERNAME FROM USERNAME
                     *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> --일반 계정인 JS로 로그인하자
SQL> CONN JS/ 1234
Connected.
SQL> SHOW USER;
USER is "JS"
SQL> --제약조건을 추가적으로 학습
SQL> --NOT NULL, DEFAULT, UNIQUE, CHECK, PRIMARY KEY, FOREIGN KEY
SQL> --JS가 보유한 ㅔ이블 목록 조회
SQL> --사전을 조회하자, 현재 계정이 일반인 계정이기 때문에 사전 이름은 USER_로 시작
SQL> SELECT TABLE_NAME FROM USER_TABLES;

TABLE_NAME                                                                      
------------------------------------------------------------                    
MEMBER                                                                          

SQL> --제약조건 중 필수적인 제약조건인 PRIMARY KEY
SQL> --UNIQUE + NOT NULL = PRIMARY KEY
SQL> --UNIQUE만으로는 아직 무결성을 보장받지 못하는 경우를 경험해보자
SQL> CREATE TABLE MEMEBER2(
  2  ID VARCHAR2(20)
  3  ,EMAIL VARCHAR2(25)
  4  ,REGDATE DATE DEFAULT SYSDATE
  5  );

Table created.

SQL> DROP TABLE MEMBER2;
DROP TABLE MEMBER2
           *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> DROP TABLE MEMEBER2;

Table dropped.

SQL> CREATE TABLE MEMBER2(
  2  ID VARCHAR2(20) UNIQUE
  3  , EMAIL VARCHAR(25) NOT NULL
  4  , REGDATE DATE DEFAULT SYSDATE
  5  );

Table created.

SQL> INSERT INTO MEMBER2(ID, EMAIL) VALUES('KING', 'DAUM');

1 row created.

SQL> INSERT INTO MEMBER2(EMAIL) VALUES('DAUM');

1 row created.

SQL> INSERT INTO MEMBER2(EMAIL) VALUES('DAUM');

1 row created.

SQL> INSERT INTO MEMBER2(EMAIL) VALUES('DAUM');

1 row created.

SQL> SELECT * FROM MEMBER2;

ID                                                                              
----------------------------------------                                        
EMAIL                                              REGDATE                      
-------------------------------------------------- --------                     
KING                                                                            
DAUM                                               25/05/07                     
                                                                                
                                                                                
DAUM                                               25/05/07                     
                                                                                
                                                                                
DAUM                                               25/05/07                     
                                                                                

ID                                                                              
----------------------------------------                                        
EMAIL                                              REGDATE                      
-------------------------------------------------- --------                     
                                                                                
DAUM                                               25/05/07                     
                                                                                

SQL> --UNIQUE는 중복을 허용하지 않지만 NULL을 허용한다.
SQL> --따라서 테이블에 입력된 데이터들 간 구분을 위한 숫자형 컬럼을 추가할 때는 UNIQUE+NOT NULL을 합친 제약조건을 부여해야 안전하다.
SQL> --이를 위해 PRIMARY KEY를 사용한다.
SQL> CREATE TABLE MEMBER3(
  2  ID NUMBER PRIMARY KEY
  3  , EMAIL VARCHAR2(25) NOT NULL
  4  , REGDATE DATE DEFAULT SYSDATE
  5  ,USERID VARCHAR2(20)
  6  );

Table created.

SQL> --PRIMARY KEY 값은 유일해야 하므로, 시스템에게 맡겨야 한다.
SQL> --시스템이 알아서 증가시켜 가며 스스로 넣도록 하자
SQL> --따라서 오직 숫자값만을 전용으로 증가시켜주는 객체인 시퀀스를 이용하자.
SQL> CREATE SEQUENCE SEQ_MEMBER3
  2  INCREMENT BY 1
  3  START WITH 1;
CREATE SEQUENCE SEQ_MEMBER3
*
ERROR at line 1:
ORA-01031: insufficient privileges 


SQL> --권한이 없으므로 권한을 부여받기 위해 SYSTEM으로 접근하자
SQL> CONN SYSTEM/ 1234
Connected.
SQL> GRANT CREATE SEQENCE TO JS;
GRANT CREATE SEQENCE TO JS
      *
ERROR at line 1:
ORA-00990: missing or invalid privilege 


SQL> ED
Wrote file afiedt.buf

  1* GRANT CREATE SEQUENCE TO JS
SQL> RUN
  1* GRANT CREATE SEQUENCE TO JS

Grant succeeded.

SQL> SYS계정은 되도록 사용을 지양하도록 한다. 워낙 막강하기 때문에 부담스럽기 때문이다.
SP2-0734: unknown command beginning "SYS계정은 ..." - rest of line ignored.
SQL> 
SQL> SYS계정 보다는 하위의 관리자인 SYSTEM을 이용하자
SP2-0734: unknown command beginning "SYS계정 보..." - rest of line ignored.
SQL> GRANT CREATE SEQUENCE TO JS;

Grant succeeded.

SQL> CONN JS/ 1234
Connected.
SQL> CREATE SEQUENCE SEQ_MEMBER3
  2  INCREMENT BY 1
  3  START WITH 1;

Sequence created.

SQL> INSERT INTO MEMBER3(ID, USERID, EMAIL)
  2  VALUES (SEQ_MEMBER3.NEXTVAL, 'KING', 'DAUM');

1 row created.

SQL> INSERT INTO MEMBER3(ID, USERID, EMAIL)
  2  VALUES (SEQ_MEMBER3.NEXTVAL, 'ADAMS', 'NAVER');

1 row created.

SQL> SELECT * FROM MEMBER3;

        ID EMAIL                                              REGDATE           
---------- -------------------------------------------------- --------          
USERID                                                                          
----------------------------------------                                        
         1 DAUM                                               25/05/07          
KING                                                                            
                                                                                
         2 NAVER                                              25/05/07          
ADAMS                                                                           
                                                                                

SQL> SPOOL OFF
